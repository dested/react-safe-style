import { ComponentType, ReactNode } from 'react';
import React from 'react';
import { SafeStyleSchema } from './index';
export declare function makeView<T, TColors extends string, TSpacing extends string, TBorderRadii extends string, TBaseClassesKeys extends string, TViewsKeys extends string>(theme: SafeStyleSchema<TColors, TSpacing, TBorderRadii, TBaseClassesKeys, TViewsKeys>, Comp: ComponentType<T>): React.ForwardRefExoticComponent<React.PropsWithoutRef<(T | (T & {
    children?: ReactNode;
})) & { [key in TBaseClassesKeys | TViewsKeys]?: boolean | undefined; } & {
    backgroundColor?: import("./styleProps").RawColor | TColors | undefined;
    color?: import("./styleProps").RawColor | TColors | undefined;
    opacity?: number | undefined;
    margin?: number | `%${number}` | TSpacing | undefined;
    marginTop?: number | `%${number}` | TSpacing | undefined;
    marginRight?: number | `%${number}` | TSpacing | undefined;
    marginBottom?: number | `%${number}` | TSpacing | undefined;
    marginLeft?: number | `%${number}` | TSpacing | undefined;
    marginHorizontal?: number | `%${number}` | TSpacing | undefined;
    marginVertical?: number | `%${number}` | TSpacing | undefined;
    padding?: number | `%${number}` | TSpacing | undefined;
    paddingTop?: number | `%${number}` | TSpacing | undefined;
    paddingRight?: number | `%${number}` | TSpacing | undefined;
    paddingBottom?: number | `%${number}` | TSpacing | undefined;
    paddingLeft?: number | `%${number}` | TSpacing | undefined;
    paddingHorizontal?: number | `%${number}` | TSpacing | undefined;
    paddingVertical?: number | `%${number}` | TSpacing | undefined;
    m?: number | `%${number}` | TSpacing | undefined;
    mt?: number | `%${number}` | TSpacing | undefined;
    mr?: number | `%${number}` | TSpacing | undefined;
    mb?: number | `%${number}` | TSpacing | undefined;
    ml?: number | `%${number}` | TSpacing | undefined;
    mh?: number | `%${number}` | TSpacing | undefined;
    mv?: number | `%${number}` | TSpacing | undefined;
    p?: number | `%${number}` | TSpacing | undefined;
    pt?: number | `%${number}` | TSpacing | undefined;
    pr?: number | `%${number}` | TSpacing | undefined;
    pb?: number | `%${number}` | TSpacing | undefined;
    pl?: number | `%${number}` | TSpacing | undefined;
    ph?: number | `%${number}` | TSpacing | undefined;
    pv?: number | `%${number}` | TSpacing | undefined;
    fontFamily?: import("csstype").Property.FontFamily | undefined;
    fontSize?: import("csstype").Property.FontSize<string | number> | undefined;
    fontStyle?: import("csstype").Property.FontStyle | undefined;
    fontWeight?: import("csstype").Property.FontWeight | undefined;
    letterSpacing?: import("csstype").Property.LetterSpacing<string | number> | undefined;
    lineHeight?: import("csstype").Property.LineHeight<string | number> | undefined;
    textAlign?: import("csstype").Property.TextAlign | undefined;
    textDecorationLine?: import("csstype").Property.TextDecorationLine | undefined;
    textDecorationStyle?: import("csstype").Property.TextDecorationStyle | undefined;
    textTransform?: import("csstype").Property.TextTransform | undefined;
    width?: import("csstype").Property.Width<string | number> | undefined;
    height?: import("csstype").Property.Height<string | number> | undefined;
    minWidth?: import("csstype").Property.MinWidth<string | number> | undefined;
    maxWidth?: import("csstype").Property.MaxWidth<string | number> | undefined;
    minHeight?: import("csstype").Property.MinHeight<string | number> | undefined;
    maxHeight?: import("csstype").Property.MaxHeight<string | number> | undefined;
    overflow?: import("csstype").Property.Overflow | undefined;
    aspectRatio?: import("csstype").Property.AspectRatio | undefined;
    alignContent?: import("csstype").Property.AlignContent | undefined;
    alignItems?: import("csstype").Property.AlignItems | undefined;
    alignSelf?: import("csstype").Property.AlignSelf | undefined;
    justifyContent?: import("csstype").Property.JustifyContent | undefined;
    flex?: import("csstype").Property.Flex<string | number> | undefined;
    flexBasis?: import("csstype").Property.FlexBasis<string | number> | undefined;
    flexDirection?: import("csstype").Property.FlexDirection | undefined;
    flexGrow?: import("csstype").Property.FlexGrow | undefined;
    flexShrink?: import("csstype").Property.FlexShrink | undefined;
    flexWrap?: import("csstype").Property.FlexWrap | undefined;
    position?: import("csstype").Property.Position | undefined;
    top?: import("csstype").Property.Top<string | number> | undefined;
    right?: import("csstype").Property.Right<string | number> | undefined;
    bottom?: import("csstype").Property.Bottom<string | number> | undefined;
    left?: import("csstype").Property.Left<string | number> | undefined;
    zIndex?: import("csstype").Property.ZIndex | undefined;
    borderBottomWidth?: import("csstype").Property.BorderBottomWidth<string | number> | undefined;
    borderLeftWidth?: import("csstype").Property.BorderLeftWidth<string | number> | undefined;
    borderRightWidth?: import("csstype").Property.BorderRightWidth<string | number> | undefined;
    borderStyle?: import("csstype").Property.BorderStyle | undefined;
    borderTopWidth?: import("csstype").Property.BorderTopWidth<string | number> | undefined;
    borderWidth?: import("csstype").Property.BorderWidth<string | number> | undefined;
    borderColor?: import("./styleProps").RawColor | TColors | undefined;
    borderTopColor?: import("./styleProps").RawColor | TColors | undefined;
    borderRightColor?: import("./styleProps").RawColor | TColors | undefined;
    borderLeftColor?: import("./styleProps").RawColor | TColors | undefined;
    borderBottomColor?: import("./styleProps").RawColor | TColors | undefined;
    borderRadius?: number | TBorderRadii | undefined;
    borderBottomLeftRadius?: number | TBorderRadii | undefined;
    borderBottomRightRadius?: number | TBorderRadii | undefined;
    borderTopLeftRadius?: number | TBorderRadii | undefined;
    borderTopRightRadius?: number | TBorderRadii | undefined;
} & {
    debugStyle?: boolean | undefined;
}> & React.RefAttributes<ComponentType<T>>>;
